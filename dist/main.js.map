{"version":3,"file":"main.js","mappings":"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","sources":["webpack://javascript_project/./src/index.js"],"sourcesContent":["const canvas = document.querySelector('#canvas');\nconst c = canvas.getContext('2d')\nconst playerShoot = document.querySelector('#playerShoot')\nconst scoreboard = document.querySelector(\"#scoreboard\")\nconst gameOverScreen = document.querySelector('#gameOver')\nconst scoreEle = document.querySelector('#scoreEle')\nconst startScreen = document.querySelector('#startScreen')\nconst scoreboardContainer = document.querySelector('.scoreboard-container')\nconst restartButton = document.querySelector('#restart')\nconst music = document.querySelector('#music')\nconst gunshot = document.querySelector('#gunshot')\nconst gunshotButton = document.querySelector('#gunshotButton')\nconst musicButton = document.querySelector('#musicButton')\nconst levelEle = document.querySelector('#levelEle')\nconst gameOverLevel = document.querySelector('#gameOverLevel')\nconst social = document.querySelector('.socials:nth-child(1)')\nconst social2 = document.querySelector('.socials:nth-child(2)')\nconst hardModeButton = document.querySelector('#hard-mode')\nconst easyModeButton = document.querySelector('#easy-mode')\n\ncanvas.width = 1820;\ncanvas.height = 800;\n\nconst playerImage = new Image();\nplayerImage.src = './assets/player/player.png'\n\nconst enemyImage = new Image();\nenemyImage.src = './assets/enemy/red_zombie.png'\n\nconst enemyImage2 = new Image();\nenemyImage2.src = './assets/enemy/blue_zombie.png'\n\nconst enemyImage3 = new Image();\nenemyImage3.src = './assets/enemy/black_zombie.png'\n\nconst enemyImage4 = new Image();\nenemyImage4.src = './assets/enemy/green_zombie.png'\n\n\nhardModeButton.addEventListener('click', () => {\n\nclass Player {\n    constructor(x, y, playerSprite) {\n        this.x = x\n        this.y = y\n        this.playerSprite = playerSprite \n        this.width = 30\n        this.height = 30\n        this.vx = 0 //velocity in the x direction\n        this.vy = 0 //velocity in the y direction\n\n        document.addEventListener(\"keydown\", this.handleKeyDown.bind(this)); // ensures the context of this remains the same\n        document.addEventListener(\"keyup\", this.handleKeyUp.bind(this));\n    }\n\n    handleKeyDown(e) { // Every time a key is pressed down, in moves in the x, y direction respectively\n        if (e.code === \"KeyA\") this.vx = -3;\n        if (e.code === \"KeyD\") this.vx = 3;\n        if (e.code === \"KeyW\") this.vy = -3;\n        if (e.code === \"KeyS\") this.vy = 3;\n    }\n\n    handleKeyUp(e) { // Every time a key is released, all movement in the respective x, y direction stop\n        if (e.code === \"KeyA\") this.vx = 0;\n        if (e.code === \"KeyD\") this.vx = 0;\n        if (e.code === \"KeyW\") this.vy = 0;\n        if (e.code === \"KeyS\") this.vy = 0;\n    }\n\n    draw() { //creates the image for the small dog that will now replace the circle \n        c.drawImage(this.playerSprite, 205, 240, spriteWidth, spriteHeight, this.x, this.y,\n                    this.width * 2, this.height * 2)\n    }\n    \n    update() {\n        this.x += this.vx; // Updates player position based on velocity\n        this.y += this.vy;\n\n        if (this.x < 0) {\n            this.x = 0\n        } else if (this.y < 0) {\n            this.y = 0\n        } else if (this.x > canvas.width - this.width) { // if player xpos is > the width of the canvas - the width of the player \n            this.x = canvas.width - this.width // then set player xpos to the width of the canvas - the height of the player \n        } else if (this.y > canvas.height - this.height) {\n            this.y = canvas.height - this.height\n        }\n    }\n}\n\nclass Enemy {\n    constructor(x, y, radius, color, velocity) {\n        this.x = x\n        this.y = y\n        this.radius = radius\n        this.color = color\n        this.velocity = velocity\n    }\n\n    draw() {  // draws red zombie\n        c.beginPath()\n        c.fillStyle = this.color\n        c.arc(this.x, this.y, this.radius, 0, 2*Math.PI, false)\n        c.save()\n        c.clip()\n        c.drawImage(enemyImage, this.x - this.radius, this.y - this.radius, this.radius*2, this.radius*2)\n        c.restore()\n        c.closePath()\n    }\n\n    draw2() { // draws blue zombie\n        c.beginPath()\n        c.fillStyle = this.color\n        c.arc(this.x, this.y, this.radius, 0, 2*Math.PI, false)\n        c.save()\n        c.clip()\n        c.drawImage(enemyImage2, this.x - this.radius, this.y - this.radius, this.radius*2, this.radius*2)\n        c.restore()\n        c.closePath()\n    }\n\n    draw3() { // draws black zombie\n        c.beginPath()\n        c.fillStyle = this.color\n        c.arc(this.x, this.y, this.radius, 0, 2*Math.PI, false)\n        c.save()\n        c.clip()\n        c.drawImage(enemyImage3, this.x - this.radius, this.y - this.radius, this.radius*2, this.radius*2)\n        c.restore()\n        c.closePath()\n    }\n\n    draw4() { // draws green zombie\n        c.beginPath()\n        c.fillStyle = this.color\n        c.arc(this.x, this.y, this.radius, 0, 2*Math.PI, false)\n        c.save()\n        c.clip()\n        c.drawImage(enemyImage4, this.x - this.radius, this.y - this.radius, this.radius*2, this.radius*2)\n        c.restore()\n        c.closePath()\n    }\n\n    updateEnemyPos() { \n        let xDiffOffset = player.width/2 // So the enemy follows the middle of the player instead of outside the player\n        let yDiffOffset = player.height/2\n        \n        let xDiff = (player.x + xDiffOffset) - this.x // player position - enemy position \n        let yDiff = (player.y + yDiffOffset) - this.y // negative about this method is the vibrations caused by the sudden shift in the x and y axis\n\n        const angle = Math.atan2((player.y + yDiffOffset + 20) - this.y, (player.x + xDiffOffset) - this.x) // angular distance from player to the enemy\n\n        this.x += Math.cos(angle)\n        this.y += Math.sin(angle)\n\n        this.draw()\n        // changes/increases direction in the x axis\n         \n        if (xDiff > 0) { // if the difference in xposition is > 0 then chase player x, y, and diagonally\n            if (this.color === 'red') {\n                this.x += 0.2 + (level * 0.05) // as levels increase, speed of enemies increase\n            } else if (this.color === 'blue') {\n                this.x += 0.4 + (level * 0.05)\n            } else if (this.color === 'black') {\n                this.x += 0.6 + (level * 0.05)\n            } else if (this.color === 'green') {\n                this.x += 1 + (level * 0.05)\n            } \n        } else {\n            if (xDiff < 0 && this.color === 'red') {\n                this.x -= 0.2 + (level * 0.05)\n            } else if (this.color === 'blue') {\n                this.x -= 0.4 + (level * 0.05)\n            } else if (this.color === 'black') {\n                this.x -= 0.6 + (level * 0.05)\n            } else if (this.color === 'green') {\n                this.x -= 1 + (level * 0.05)\n            }    \n        }\n            // changes/increases direction in the y axis\n            if (yDiff > 0) {\n                if (this.color === 'red') {\n                    this.y += 0.2 + (level * 0.05) // if the difference in yposition is > 0 then chase player\n                } else if (this.color === 'blue') {\n                    this.y += 0.4 + (level * 0.05)\n                } else if (this.color === 'black') {\n                    this.y += 0.6 + (level * 0.05) \n                } else if (this.color === 'green') {\n                    this.y += 1 + (level * 0.05)\n                } \n        } else {\n            if (yDiff < 0 && this.color === 'red') {\n                this.y -= 0.2 + (level * 0.05) \n            } else if (this.color === 'blue') {\n                this.y -= 0.4 + (level * 0.05)\n            } else if (this.color === 'black') {\n                this.y -= 0.6 + (level * 0.05)\n            } else if (this.color === 'green') {\n                this.y -= 1 + (level * 0.05)\n            }\n        }\n    }\n\n        speedIncrease () {\n            if (xDiff > 0) {\n                this.x += 1\n            } else if (xDiff < 0) {\n                this.x -= 1\n            } else if (yDiff > 0) {\n                this.y += 1\n            } else if (yDiff < 0) {\n                this.y -= 1\n            }\n        }\n\n    }\n\nclass Projectile {\n    constructor(x, y, radius, color, velocity) {\n        this.x = x\n        this.y = y\n        this.radius = radius\n        this.color = color\n        this.velocity = velocity\n        this.vx = 0\n        this.vy = 0\n    }\n\n    draw() {\n        c.beginPath()\n        c.fillStyle = this.color\n        c.arc(this.x, this.y, this.radius, 0, 2*Math.PI, false)\n        c.shadowColor = '#899'\n        c.shadowBlur = 9\n        c.fill()\n        c.closePath()\n    }\n\n    update() {\n        this.draw()\n        this.x = this.x + this.velocity.x\n        this.y = this.y + this.velocity.y\n    }\n}\n\nlet enemies = []\nlet projectiles = []\nlet enemyProjectiles = []\nlet score = 0\nlet playerHealth = 100\nlet level = 0\n\n\nconst spriteWidth = 34 // specific coordinates to select character from sprite sheet\nconst spriteHeight = 42\nconst player = new Player(100, 100, playerImage);\n\n\nfunction animate() {\n    c.clearRect(0, 0, canvas.width, canvas.height) // clears the canvas \n    const animateAll = requestAnimationFrame(animate)\n    player.x += player.vx // updating player position based on its velocity\n    player.y += player.vy\n    \n    player.update(); // updates the player x and y axis \n    player.draw(); // draws the player in the updated location\n\n    eachEnemy() // calls on the function to draw zombies and handles most of the collision logic as we iteration through each enemy\n    if (enemies.length === 0) {\n        level += 1\n        createEnemies() // creates more enemies as the levels increase\n        levelEle.innerHTML = `Level: ${level}`\n    }\n\n    projectiles.forEach((projectile, idx) => {\n        projectile.update()\n\n        // Removes the projectiles\n        if (projectile.x - projectile.radius < 0 || \n            projectile.x - projectile.radius > canvas.width ||\n            projectile.y + projectile.radius < 0 ||\n            projectile.y - projectile.radius > canvas.height) {\n                projectiles.splice(idx, 1) //removes 1 projectile from the array\n            }\n        })\n\n\n    function gameOver() {\n        cancelAnimationFrame(animateAll) // cancels all animations\n        const endScreen = document.querySelector('#gameOver')\n        endScreen.style.display\n        gameOverScreen.style.display = 'block' // allows our hidden gameover screen to be displayed once our health hits 0\n        scoreEle.innerHTML = `${score} Points` // allows score to be displayed\n        gameOverLevel.innerHTML = `Survived until level ${level}` // allows level to be displayed\n    }\n\n    if (playerHealth <= 0) {\n        gameOver()\n        scoreboardContainer.style.display = 'none' // hides the scoreboard once it's gameover\n        levelEle.style.display = 'none' // hides the level display once it's gameover\n    }\n\n    if (startScreen.style.display == 'block') {\n        cancelAnimationFrame(animateAll)\n    }\n\n    enemyProjectiles.forEach((projectile) => {\n        projectile.update()\n        projectile.draw()\n    })\n\n}\n\n\nfunction eachEnemy() {\n    enemies.forEach((enemy, idx) => {\n        \n        enemy.updateEnemyPos()\n\n        if (enemy.color === \"red\") { // drawing the different types/colors of zombies\n            enemy.draw()\n        } else if (enemy.color === \"blue\") {\n            enemy.draw2()\n        } else if (enemy.color === \"black\") {\n            enemy.draw3()\n        } else {\n            enemy.draw4()\n        }\n    \n        // iterating through projectiles array \n        projectiles.forEach((projectile, pidx) => {\n            const distance = Math.hypot(projectile.x - enemy.x, projectile.y - enemy.y) // measures the distance from projectile to the enemy\n\n        if (distance - enemy.radius - projectile.radius < 1) { // we need to check the enemy radius and the projectile radius\n            enemies.splice(idx, 1) // removing a single enemy at the specific index\n            projectiles.splice(pidx, 1) // removing a single projectile at the specific index\n            if (enemy.color === 'red') {\n                score += 10 // adds 10 to the score\n                scoreboard.innerHTML = `Score: ${score}` // shows player score on the screen\n            } else if (enemy.color === 'blue') {\n                score += 20\n                scoreboard.innerHTML = `Score: ${score}`\n            } else if (enemy.color === 'black') {\n                score += 30 \n                scoreboard.innerHTML = `Score: ${score}`\n            } else if (enemy.color === 'green') {\n                score += 50\n                scoreboard.innerHTML = `Score: ${score}`\n            }\n        }\n        })\n\n        // Collision logic below nested in an enemy loop\n        let xDiffOffset = player.width/2 // So the enemy follows the middle of the player instead of outside the player\n        let yDiffOffset = player.height/2\n\n        enemyProjectiles.forEach((projectile, pidx) => {\n            const distance = Math.hypot(projectile.x - (player.x + xDiffOffset), projectile.y - (player.y + yDiffOffset)) // measures the distance from projectile to the player\n            if (distance - player.width - projectile.radius < 1) { // we need to check the enemy radius and the projectile radius\n                enemyProjectiles.splice(pidx, 1)\n                playerHealth -= 5\n                health.innerHTML = `Health: ${playerHealth}` // shows player health on screen\n            }\n        })\n\n            // measures distance from player to the enemy and subtracts 1 if player hitbox overlaps with enemy\n            const distance = Math.hypot((player.x + xDiffOffset) - enemy.x, (player.y + yDiffOffset) - enemy.y) - enemy.radius // measures distance from player to the enemy\n            \n        if (distance - (enemy.radius/2) - (player.width/6) - (player.height/6) < 1 ) { //distance between player and enemy\n            playerHealth -= 1 // subtracts 0.2 to playerhealth for every millisecond of contact\n            health.innerHTML = `Health: ${playerHealth}` // displays changing health\n        }\n    })\n}\n\n\nfunction createEnemies() {\n    let maxEnemy = 1\n    \n    maxEnemy = (level * 2) - 1\n    if (level >= 1) {\n        enemies.forEach((enemy) => {\n            enemy.speedIncrease() // increases speed of enemies for every level increase\n        })\n        enemyProjectiles = []\n    }\n\n    for (let i = 0; i < maxEnemy; i++) {\n    const randomColor = ['red', 'blue', 'green', 'black']\n    const randomValue = randomColor[Math.floor(randomColor.length * Math.random())]; // randomly selects color in array\n\n    let x = Math.floor(Math.random() * canvas.width) // random x variable\n    let y = Math.floor(Math.random() * canvas.height) // random y variable\n\n    enemies.push(new Enemy(x, y, 30, randomValue, this.velocity)) // pushing newly created enemy into array\n        \n    enemies.forEach((enemy) => {\n        enemy.updateEnemyPos();\n            if (enemy.color === 'red') {\n                const angle = Math.atan2(player.y - enemy.y, player.x - enemy.x)\n                const velocity = {\n                    x: Math.cos(angle) * 2, // increasing x velocity by 10\n                    y: Math.sin(angle) * 2\n                }\n                enemyProjectiles.push(new Projectile(enemy.x, enemy.y, 3, 'blue', velocity))\n            }\n        })\n    }\n}\n\nfunction newGame() { // reseting all arrays and variables\n    projectiles = []\n    enemyProjectiles = []\n    enemies = []\n    score = 0\n    playerHealth = 100\n    level = 0\n\n    let healthUI = document.querySelector('#health')\n    healthUI.innerHTML = `Health: ${playerHealth}`\n\n    let scoreUI = document.querySelector('#scoreboard')\n    scoreUI.innerHTML = `Score: ${score}` \n}\n \nlet shoot = true \naddEventListener('click', (e) => {\n    if (shoot) {\n    const offsetX = 55 // offsets the x so that bullet comes out of gun\n    const offsetY = 30  // In angle variable subtracting player by offset to fix the angle difference caused by offset\n    const angle = Math.atan2(e.clientY - player.y - offsetY, e.clientX - player.x - offsetX) // calculates angular distance from mouse click to player\n    \n    const velocity = {\n        x: Math.cos(angle) * 10, // increasing x velocity by 10\n        y: Math.sin(angle) * 10\n    }\n\n    if (projectiles.push(new Projectile(player.x + offsetX, player.y + offsetY, 3, 'red', velocity))) {\n        addEventListener('click', () => {\n            gunshot.play();\n            gunshot.volume = 0.2\n        })\n    }\n        shoot = false    \n        setTimeout(() => {\n            shoot = true\n        }, 500)\n    }\n})\n\n\nrestartButton.addEventListener('click', () => {\n    newGame() // resets everything\n    animate() // reanimates the game\n    music.play()\n    music.volume = 0.2\n    gameOverScreen.style.display = 'none' // hides the gameover display\n    scoreboardContainer.style.display = 'block'\n    levelEle.style.display = 'block'\n})\n\n\nmusicButton.addEventListener('click', () => {\n    if (music.paused) { //music.paused returns a boolean value\n        music.play()\n        music.volume = 0.2\n    } else {\n        music.pause()\n        music.currentTime = 0;\n    }\n})\n\nhardModeButton.addEventListener('click', () => {\n    newGame()\n    animate()\n    music.play()\n    music.volume = 0.2\n    startScreen.style.display = 'none'\n    scoreboardContainer.style.display = 'block'\n    levelEle.style.display = 'block'\n    social.style.display = 'block'\n    social2.style.display = 'block'\n    })\n})\n\n\nmusicButton.addEventListener('click', () => {\n    if (music.paused) { //music.paused returns a boolean value\n        music.play()\n        music.volume = 0.2\n    } else {\n        music.pause()\n        music.currentTime = 0;\n    }\n})\n\neasyModeButton.addEventListener('click', () => {\n\nclass Player {\n    constructor(x, y, playerSprite) {\n        this.x = x\n        this.y = y\n        this.playerSprite = playerSprite \n        this.width = 30\n        this.height = 30\n        this.vx = 0 //velocity in the x direction\n        this.vy = 0 //velocity in the y direction\n\n        document.addEventListener(\"keydown\", this.handleKeyDown.bind(this)); // ensures the context of this remains the same\n        document.addEventListener(\"keyup\", this.handleKeyUp.bind(this));\n    }\n\n    handleKeyDown(e) { // Every time a key is pressed down, in moves in the x, y direction respectively\n        if (e.code === \"KeyA\") this.vx = -3;\n        if (e.code === \"KeyD\") this.vx = 3;\n        if (e.code === \"KeyW\") this.vy = -3;\n        if (e.code === \"KeyS\") this.vy = 3;\n    }\n\n    handleKeyUp(e) { // Every time a key is released, all movement in the respective x, y direction stop\n        if (e.code === \"KeyA\") this.vx = 0;\n        if (e.code === \"KeyD\") this.vx = 0;\n        if (e.code === \"KeyW\") this.vy = 0;\n        if (e.code === \"KeyS\") this.vy = 0;\n    }\n\n    draw() { //creates the image for the small dog that will now replace the circle \n        c.drawImage(this.playerSprite, 205, 240, spriteWidth, spriteHeight, this.x, this.y,\n                    this.width * 2, this.height * 2)\n    }\n    \n    update() {\n        this.x += this.vx; // Updates player position based on velocity\n        this.y += this.vy;\n\n        if (this.x < 0) {\n            this.x = 0\n        } else if (this.y < 0) {\n            this.y = 0\n        } else if (this.x > canvas.width - this.width) { // if player xpos is > the width of the canvas - the width of the player \n            this.x = canvas.width - this.width // then set player xpos to the width of the canvas - the height of the player \n        } else if (this.y > canvas.height - this.height) {\n            this.y = canvas.height - this.width\n        }\n    }\n}\n\nclass Enemy {\n    constructor(x, y, radius, color, velocity) {\n        this.x = x\n        this.y = y\n        this.radius = radius\n        this.color = color\n        this.velocity = velocity\n    }\n\n    draw() {  // draws red zombie\n        c.beginPath()\n        c.fillStyle = this.color\n        c.arc(this.x, this.y, this.radius, 0, 2*Math.PI, false)\n        c.save()\n        c.clip()\n        c.drawImage(enemyImage, this.x - this.radius, this.y - this.radius, this.radius*2, this.radius*2)\n        c.restore()\n        c.closePath()\n    }\n\n    draw2() { // draws blue zombie\n        c.beginPath()\n        c.fillStyle = this.color\n        c.arc(this.x, this.y, this.radius, 0, 2*Math.PI, false)\n        c.save()\n        c.clip()\n        c.drawImage(enemyImage2, this.x - this.radius, this.y - this.radius, this.radius*2, this.radius*2)\n        c.restore()\n        c.closePath()\n    }\n\n    draw3() { // draws black zombie\n        c.beginPath()\n        c.fillStyle = this.color\n        c.arc(this.x, this.y, this.radius, 0, 2*Math.PI, false)\n        c.save()\n        c.clip()\n        c.drawImage(enemyImage3, this.x - this.radius, this.y - this.radius, this.radius*2, this.radius*2)\n        c.restore()\n        c.closePath()\n    }\n\n    draw4() { // draws green zombie\n        c.beginPath()\n        c.fillStyle = this.color\n        c.arc(this.x, this.y, this.radius, 0, 2*Math.PI, false)\n        c.save()\n        c.clip()\n        c.drawImage(enemyImage4, this.x - this.radius, this.y - this.radius, this.radius*2, this.radius*2)\n        c.restore()\n        c.closePath()\n    }\n\n    updateEnemyPos() { // note enemies still vibrate back and forth...\n        let xDiffOffset = player.width/2 // So the enemy follows the middle of the player instead of outside the player\n        let yDiffOffset = player.height/2\n        \n        let xDiff = (player.x + xDiffOffset) - this.x // player position - enemy position \n        let yDiff = (player.y + yDiffOffset) - this.y // negative about this method is the vibrations caused by the sudden shift in the x and y axis\n\n        const angle = Math.atan2((player.y + yDiffOffset + 20) - this.y, (player.x + xDiffOffset) - this.x) // angular distance from player to the enemy\n\n        this.x += Math.cos(angle)\n        this.y += Math.sin(angle)\n\n        this.draw()\n        // changes/increases direction in the x axis\n         \n        if (xDiff > 0) { // if the difference in xposition is > 0 then chase player x, y, and diagonally\n            if (this.color === 'red') {\n                this.x += 0.2 + (level * 0.03) // as levels increase, speed of enemies increase\n            } else if (this.color === 'blue') {\n                this.x += 0.4 + (level * 0.03)\n            } else if (this.color === 'black') {\n                this.x += 0.6 + (level * 0.03)\n            } else if (this.color === 'green') {\n                this.x += 1 + (level * 0.03)\n            } \n        } else {\n            if (xDiff < 0 && this.color === 'red') {\n                this.x -= 0.2 + (level * 0.03)\n            } else if (this.color === 'blue') {\n                this.x -= 0.4 + (level * 0.03)\n            } else if (this.color === 'black') {\n                this.x -= 0.6 + (level * 0.03)\n            } else if (this.color === 'green') {\n                this.x -= 1 + (level * 0.03)\n            }    \n        }\n            // changes/increases direction in the y axis\n            if (yDiff > 0) {\n                if (this.color === 'red') {\n                    this.y += 0.2 + (level * 0.03) // if the difference in yposition is > 0 then chase player\n                } else if (this.color === 'blue') {\n                    this.y += 0.4 + (level * 0.03)\n                } else if (this.color === 'black') {\n                    this.y += 0.6 + (level * 0.03) \n                } else if (this.color === 'green') {\n                    this.y += 1 + (level * 0.03)\n                } \n        } else {\n            if (yDiff < 0 && this.color === 'red') {\n                this.y -= 0.2 + (level * 0.03) \n            } else if (this.color === 'blue') {\n                this.y -= 0.4 + (level * 0.03)\n            } else if (this.color === 'black') {\n                this.y -= 0.6 + (level * 0.03)\n            } else if (this.color === 'green') {\n                this.y -= 1 + (level * 0.03)\n            }\n        }\n    }\n\n        speedIncrease () {\n            if (xDiff > 0) {\n                this.x += 1\n            } else if (xDiff < 0) {\n                this.x -= 1\n            } else if (yDiff > 0) {\n                this.y += 1\n            } else if (yDiff < 0) {\n                this.y -= 1\n            }\n        }\n\n    }\n\nclass Projectile {\n    constructor(x, y, radius, color, velocity) {\n        this.x = x\n        this.y = y\n        this.radius = radius\n        this.color = color\n        this.velocity = velocity\n        this.vx = 0\n        this.vy = 0\n    }\n\n    draw() {\n        c.beginPath()\n        c.fillStyle = this.color\n        c.arc(this.x, this.y, this.radius, 0, 2*Math.PI, false)\n        c.shadowColor = '#899'\n        c.shadowBlur = 9\n        c.fill()\n        c.closePath()\n    }\n\n    update() {\n        this.draw()\n        this.x = this.x + this.velocity.x\n        this.y = this.y + this.velocity.y\n    }\n}\n\nlet enemies = []\nlet projectiles = []\nlet score = 0\nlet playerHealth = 100\nlet level = 0\n\n\nconst spriteWidth = 34 // specific coordinates to select character from sprite sheet\nconst spriteHeight = 42\nconst player = new Player(100, 100, playerImage);\n\n\nfunction animate() {\n    c.clearRect(0, 0, canvas.width, canvas.height) // clears the canvas \n    const animateAll = requestAnimationFrame(animate)\n    player.x += player.vx // updating player position based on its velocity\n    player.y += player.vy\n    \n    player.update(); // updates the player x and y axis \n    player.draw(); // draws the player in the updated location\n\n    eachEnemy() // calls on the function to draw zombies and handles most of the collision logic as we iteration through each enemy\n    if (enemies.length === 0) {\n        level += 1\n        createEnemies() // creates more enemies as the levels increase\n        levelEle.innerHTML = `Level: ${level}`\n    }\n\n    projectiles.forEach((projectile, idx) => {\n        projectile.update()\n\n        // Removes the projectiles\n        if (projectile.x - projectile.radius < 0 || \n            projectile.x - projectile.radius > canvas.width ||\n            projectile.y + projectile.radius < 0 ||\n            projectile.y - projectile.radius > canvas.height) {\n                projectiles.splice(idx, 1) //removes 1 projectile from the array\n            }\n        })\n\n\n    function gameOver() {\n        cancelAnimationFrame(animateAll) // cancels all animations\n        const endScreen = document.querySelector('#gameOver')\n        endScreen.style.display\n        gameOverScreen.style.display = 'block' // allows our hidden gameover screen to be displayed once our health hits 0\n        scoreEle.innerHTML = `${score} Points` // allows score to be displayed\n        gameOverLevel.innerHTML = `Survived until level ${level}` // allows level to be displayed\n    }\n\n    if (playerHealth <= 0) {\n        gameOver()\n        scoreboardContainer.style.display = 'none' // hides the scoreboard once it's gameover\n        levelEle.style.display = 'none' // hides the level display once it's gameover\n    }\n\n    if (startScreen.style.display == 'block') {\n        cancelAnimationFrame(animateAll)\n    }\n\n}\n\n\nfunction eachEnemy() {\n    enemies.forEach((enemy, idx) => {\n        \n        enemy.updateEnemyPos()\n\n        if (enemy.color === \"red\") { // drawing the different types/colors of zombies\n            enemy.draw()\n        } else if (enemy.color === \"blue\") {\n            enemy.draw2()\n        } else if (enemy.color === \"black\") {\n            enemy.draw3()\n        } else {\n            enemy.draw4()\n        }\n    \n        // iterating through projectiles array \n        projectiles.forEach((projectile, pidx) => {\n            const distance = Math.hypot(projectile.x - enemy.x, projectile.y - enemy.y) // measures the distance from projectile to the enemy\n\n        if (distance - enemy.radius - projectile.radius < 1) { // we need to check the enemy radius and the projectile radius\n            enemies.splice(idx, 1) // removing a single enemy at the specific index\n            projectiles.splice(pidx, 1) // removing a single projectile at the specific index\n            if (enemy.color === 'red') {\n                score += 10 // adds 10 to the score\n                scoreboard.innerHTML = `Score: ${score}` // shows player score on the screen\n            } else if (enemy.color === 'blue') {\n                score += 20\n                scoreboard.innerHTML = `Score: ${score}`\n            } else if (enemy.color === 'black') {\n                score += 30 \n                scoreboard.innerHTML = `Score: ${score}`\n            } else if (enemy.color === 'green') {\n                score += 50\n                scoreboard.innerHTML = `Score: ${score}`\n            }\n        }\n        })\n\n        // Collision logic below nested in an enemy loop\n        let xDiffOffset = player.width/2 // So the enemy follows the middle of the player instead of outside the player\n        let yDiffOffset = player.height/2\n\n        // measures distance from player to the enemy and subtracts 1 if player hitbox overlaps with enemy\n        const distance = Math.hypot((player.x + xDiffOffset) - enemy.x, (player.y + yDiffOffset) - enemy.y) - enemy.radius // measures distance from player to the enemy\n            \n        if (distance - (enemy.radius/2) - (player.width/6) - (player.height/6) < 1 ) { //distance between player and enemy\n            playerHealth -= 0.5 // subtracts 0.5 to playerhealth for every millisecond of contact\n            health.innerHTML = `Health: ${playerHealth}` // displays changing health\n        }\n    })\n}\n\n\nfunction createEnemies() {\n    let maxEnemy = 1\n    \n    maxEnemy = (level * 2) - 1\n    if (level >= 1) {\n        enemies.forEach((enemy) => {\n            enemy.speedIncrease() // increases speed of enemies for every level increase\n        })\n    }\n\n    for (let i = 0; i < maxEnemy; i++) {\n    const randomColor = ['red', 'blue', 'green', 'black']\n    const randomValue = randomColor[Math.floor(randomColor.length * Math.random())]; // randomly selects color in array\n\n    let x = Math.floor(Math.random() * canvas.width) // random x variable\n    let y = Math.floor(Math.random() * canvas.height) // random y variable\n\n    enemies.push(new Enemy(x, y, 30, randomValue, this.velocity)) // pushing newly created enemy into array\n        \n    }\n}\n\nfunction newGame() { // reseting all arrays and variables\n    projectiles = []\n    enemies = []\n    score = 0\n    playerHealth = 100\n    level = 0\n\n    let healthUI = document.querySelector('#health')\n    healthUI.innerHTML = `Health: ${playerHealth}`\n\n    let scoreUI = document.querySelector('#scoreboard')\n    scoreUI.innerHTML = `Score: ${score}` \n}\n \naddEventListener('click', (e) => {\n\n    const offsetX = 55 // offsets the x so that bullet comes out of gun\n    const offsetY = 30  // In angle variable subtracting player by offset to fix the angle difference caused by offset\n    const angle = Math.atan2(e.clientY - player.y - offsetY, e.clientX - player.x - offsetX) // calculates angular distance from mouse click to player\n    \n    const velocity = {\n        x: Math.cos(angle) * 15, // increasing x velocity by 10\n        y: Math.sin(angle) * 15\n    }\n\n    projectiles.push(new Projectile(player.x + offsetX, player.y + offsetY, 3, 'red', velocity))\n})\n\nrestartButton.addEventListener('click', () => {\n    newGame() // resets everything\n    animate() // reanimates the game\n    music.play()\n    music.volume = 0.2\n    gameOverScreen.style.display = 'none' // hides the gameover display\n    scoreboardContainer.style.display = 'block'\n    levelEle.style.display = 'block'\n})\n\n\nwindow.addEventListener('click', () => {\n    gunshot.play();\n    gunshot.volume = 0.2\n})\n\nmusicButton.addEventListener('click', () => {\n    if (music.paused) { //music.paused returns a boolean value\n        music.play()\n        music.volume = 0.2\n    } else {\n        music.pause()\n        music.currentTime = 0;\n    }\n})\nhardModeButton.addEventListener('click', () => {\n    newGame()\n    animate()\n    music.play()\n    music.volume = 0.2\n    startScreen.style.display = 'none'\n    scoreboardContainer.style.display = 'block'\n    levelEle.style.display = 'block'\n    social.style.display = 'block'\n    social2.style.display = 'block'\n    })\n})\n\n"],"names":["canvas","document","querySelector","c","getContext","scoreboard","gameOverScreen","scoreEle","startScreen","scoreboardContainer","restartButton","music","gunshot","musicButton","levelEle","gameOverLevel","social","social2","hardModeButton","easyModeButton","width","height","playerImage","Image","src","enemyImage","enemyImage2","enemyImage3","enemyImage4","addEventListener","Enemy","constructor","x","y","radius","color","velocity","this","draw","beginPath","fillStyle","arc","Math","PI","save","clip","drawImage","restore","closePath","draw2","draw3","draw4","updateEnemyPos","xDiffOffset","player","yDiffOffset","xDiff","yDiff","angle","atan2","cos","sin","level","speedIncrease","Projectile","vx","vy","shadowColor","shadowBlur","fill","update","enemies","projectiles","enemyProjectiles","score","playerHealth","playerSprite","handleKeyDown","bind","handleKeyUp","e","code","animate","clearRect","animateAll","requestAnimationFrame","forEach","enemy","idx","projectile","pidx","hypot","splice","innerHTML","health","length","maxEnemy","i","randomColor","randomValue","floor","random","push","createEnemies","cancelAnimationFrame","style","display","newGame","shoot","offsetX","offsetY","clientY","clientX","play","volume","setTimeout","paused","pause","currentTime","window"],"sourceRoot":""}